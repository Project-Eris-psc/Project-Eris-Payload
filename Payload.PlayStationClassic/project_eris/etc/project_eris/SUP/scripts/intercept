#!/bin/sh
#
#  Copyright 2020 ModMyClassic (https://modmyclassic.com/license)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################
# PlayStation Classic Stock UI to Emulator Intercept Script
# ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

START=$(date +%s%N)
### LOAD CONFIGURATION ########################################################
source "/var/volatile/project_eris.cfg"

### LOAD FUNCTION LIBRARIES ###################################################
source "/media/project_eris/etc/project_eris/FUNC/0030_retroarch.funcs"

### INTERCEPT VARIABLES #######################################################
INTERCEPT_PCSX_PATH="/usr/sony/bin/pcsx"
INTERCEPT_GAME_PATH=""
INTERCEPT_GAME_DIR=""
INTERCEPT_GAME_ID=""
INTERCEPT_GAME_EXT=""
INTERCEPT_GAME_ALTERNATIVE_PATH=""
INTERCEPT_SAVE_STATE=false
INTERCEPT_FILE_FORMATS=(    # alternative PCSX ReARMed game formats
  "m3u"
  "pbp"
  "img"
  "iso"
  "mdf"
  "toc"
  "cbn"
  "chd"
)
UI_MENU_PID=""
### INTERCEPT FUNCTIONS #######################################################
delayed_sdl_display_kill() {
  sleep 30
  killall sdl_display
}
suspend_ui_menu() {
  START_SUSPEND=$(date +%s%N)
  UI_MENU_PID="$(ps | grep ui_menu | grep -v grep | awk '{print $1}')"
  if [ $(echo "${UI_MENU_PID}" | wc -l) -ne 1 ]; then
    echo "[PROJECT ERIS](INTERCEPT)(ERROR) unable to suspend ui_menu"
    echo "[PROJECT ERIS](INTERCEPT)(ERROR) ui_menu is either not running, or more than one instance is running"
    echo "[PROJECT ERIS](INTERCEPT)(ERROR) UI_MENU_PID: ${UI_MENU_PID}"
    UI_MENU_PID=""
  else
    echo "[PROJECT ERIS](INTERCEPT)(INFO) suspending ui_menu (PID ${UI_MENU_PID})"
    kill -STOP "${UI_MENU_PID}"
  fi
  END_SUSPEND=$(date +%s%N)
  echo "[PROJECT ERIS](INTERCEPT)(PROFILE) suspending ui_menu took: $(((END_SUSPEND-START_SUSPEND)/1000000))ms to execute"
}

resume_ui_menu() {
  START_SUSPEND=$(date +%s%N)
  if [ ! "${UI_MENU_PID}" = "" ]; then
    echo "[PROJECT ERIS](INTERCEPT)(INFO) resuming ui_menu (PID ${UI_MENU_PID})"
    kill -CONT "${UI_MENU_PID}"
    UI_MENU_PID=""
  fi
  END_SUSPEND=$(date +%s%N)
  echo "[PROJECT ERIS](INTERCEPT)(PROFILE) resuming ui_menu took: $(((END_SUSPEND-START_SUSPEND)/1000000))ms to execute"
}

### START INTERCEPT SCRIPT ####################################################
# This should be launched directly from ui_menu by
# substituing the sPcsxExecPath in /usr/sony/share/data/preferences/system.pre
# with the path to this script
###############################################################################
echo "[PROJECT ERIS](INTERCEPT)(INFO) Starting PS Classic Intercept"
### CHECK FOR LAUNCH SCRIPT ###################################################
# If launch script exists run it instead of pcsx/RA
if [ -f "/data/AppData/sony/title/launch.sh" ]; then
  echo "[PROJECT ERIS](INTERCEPT)(INFO) launch.sh exists"
  TITLE_PATH=$(readlink -fn /data/AppData/sony/title/)
  ln -sf "${TITLE_PATH}" "/var/volatile/launchtmp"
  echo "launch_launcher_command" > "/tmp/launchfilecommand"
  touch "/data/power/prepare_suspend"
  exit 0
fi
if [ "$#" -ge 1 ]; then
  echo "[PROJECT ERIS](INTERCEPT)(INFO) There are $# parameters:"
  echo "[PROJECT ERIS](INTERCEPT)(INFO) $*"
else
  echo "[PROJECT ERIS](INTERCEPT)(INFO) There are no parameters"
fi
echo "[PROJECT ERIS](INTERCEPT)(INFO) The current working directory: ${PWD}"
suspend_ui_menu
# auto_dimmer causes audio glitching in RetroArch
killall -s TERM "auto_dimmer" &> "/dev/null"
INTERCEPT_COMMAND=""
FOUND_CDFILE=false
RA_ARGS=""
RA_CORE="pcsx_rearmed_libretro.so"
RA_GAME=false
# Loop through each ARGument to pull out information relating to which game is being loaded
# and whether this is a Save State load
START_ARG=$(date +%s%N)
for ARG in "$@"
do
  if [ "${FOUND_CDFILE}" = true ]; then
    INTERCEPT_GAME_PATH="${ARG}"
    echo "[PROJECT ERIS](INTERCEPT)(INFO) Game full path: ${INTERCEPT_GAME_PATH}"
    INTERCEPT_GAME_DIR="${ARG%/*}/"
    echo "[PROJECT ERIS](INTERCEPT)(INFO) Game directory: ${INTERCEPT_GAME_DIR}"
    INTERCEPT_GAME_ID="${ARG##*/}"
    INTERCEPT_GAME_ID="${INTERCEPT_GAME_ID%.*}"
    echo "[PROJECT ERIS](INTERCEPT)(INFO) Game ID: ${INTERCEPT_GAME_ID}"
    INTERCEPT_GAME_EXT="${ARG##*.}"
    echo "[PROJECT ERIS](INTERCEPT)(INFO) Game extension: ${INTERCEPT_GAME_EXT}"
    if [ "${INTERCEPT_GAME_ID%%-*}" = "RA" ]; then	
	  REQUESTED_CORE_FILE=($(ls /data/AppData/sony/title/RACORE-* 2>/dev/null))	
	  if [ "${#REQUESTED_CORE_FILE[@]}" != "1" ]; then	
		echo "[INTERCEPT](ERROR) Cannot find RA Cores"	
		resume_ui_menu	
		exit 1	
	  fi
	  REQUESTED_CORE_FILE="${REQUESTED_CORE_FILE[0]}"	
	  source "${REQUESTED_CORE_FILE}"
	  REQUESTED_CORE_FILE="${REQUESTED_CORE_FILE##*/}"	
	  RA_CORE="${REQUESTED_CORE_FILE##*-}"
	  RA_GAME=true	
	  RA_ARGS="--appendconfig /media/project_eris/opt/retroarch/config/retroarch/ra-game.cfg"	
	  echo "[PROJECT ERIS](INTERCEPT)(INFO) Detected RA Game"	
	  echo "[PROJECT ERIS](INTERCEPT)(INFO) Requested RetroArch Core is $ra_core"
	fi
    # Check if the game exists in an alternative format
    # The game path always has .cue appened to the BASENAME field of the DISC table in regional.db
    # EXCEPT when the game is launched from a Save State. In this case the Game Path is determined from
    # the first line of filename.txt.res in the games PCSX data directory (ie. /data/AppData/sony/pcsx/1/.pcsx/filename.txt.res)
    if [ "$INTERCEPT_SAVE_STATE" = false ]; then	
      if [ "${RA_GAME}" = true ]; then	
        INTERCEPT_GAME_PATH="${ARG%.*}"	
        INTERCEPT_GAME_ID="${INTERCEPT_GAME_ID%.*}"	
        INTERCEPT_GAME_EXT="${INTERCEPT_GAME_PATH##*.}"	
        echo "[PROJECT ERIS](INTERCEPT)(INFO) RA Game full path: ${INTERCEPT_GAME_PATH}"	
        echo "[PROJECT ERIS](INTERCEPT)(INFO) RA Game ID: ${INTERCEPT_GAME_ID}"	
        echo "[PROJECT ERIS](INTERCEPT)(INFO) RA Game extension: ${INTERCEPT_GAME_EXT}"	
        break	
      fi
      START_ALT=$(date +%s%N)
      for f in "${INTERCEPT_FILE_FORMATS[@]}"; do
        if [ "${LAUNCH_RA_FROM_STOCK_UI}" = "0" ] && [ "${f}" = "m3u" ]; then
          echo "[PROJECT ERIS](INTERCEPT)(INFO) Ignoring m3u game format as Stock PCSX is the current emulator"
          continue
        fi
        F_UPPER=$(echo ${f} | tr a-z A-Z)
        if [ -f "${ARG%.cue}.${f}" ]; then
          INTERCEPT_GAME_ALTERNATIVE_PATH="${ARG%.cue}.${f}"
        elif [ -f "${ARG%.cue}.${F_UPPER}" ]; then
          INTERCEPT_GAME_ALTERNATIVE_PATH="${ARG%.cue}.${F_UPPER}"
          f=${F_UPPER}
        fi
        if [ ! -z "${INTERCEPT_GAME_ALTERNATIVE_PATH}" ]; then
          echo "[PROJECT ERIS](INTERCEPT)(INFO) Alternative game format exists (${f}), this will be used instead of the .cue"
          ARG="${INTERCEPT_GAME_ALTERNATIVE_PATH}"
          INTERCEPT_GAME_PATH="${ARG}"
          INTERCEPT_GAME_EXT="${f}"
          echo "[PROJECT ERIS](INTERCEPT)(INFO) New Game full path: ${INTERCEPT_GAME_PATH}"
          echo "[PROJECT ERIS](INTERCEPT)(INFO) New Game extension: ${INTERCEPT_GAME_EXT}"
          break
        fi
      done
      END_ALT=$(date +%s%N)
      echo "[PROJECT ERIS](INTERCEPT)(PROFILE) finding alternative game formats took: $(((END_ALT-START_ALT)/1000000))ms to execute"
    fi
    FOUND_CDFILE=false
    continue
  fi
  case ${ARG} in
    -cdfile)
      FOUND_CDFILE=true
      continue
      ;;
     -load)
      echo "[PROJECT ERIS](INTERCEPT)(INFO) This is a Save State load"
      INTERCEPT_SAVE_STATE=true
      ;;
  esac
  #   Build the new parameters for PCSX
  INTERCEPT_COMMAND="${INTERCEPT_COMMAND} ${ARG}"
done
if [ "${RA_GAME}" = false ] && [ "${INTERCEPT_GAME_EXT}" = "chd" ]; then
	echo "[PROJECT ERIS](INTERCEPT)(INFO) chd found, force LAUNCH_RA_FROM_STOCK_UI"	
	LAUNCH_RA_FROM_STOCK_UI="1"
fi
END_ARG=$(date +%s%N)
echo "[PROJECT ERIS](INTERCEPT)(PROFILE) extracting Arguments took: $(((END_ARG-START_ARG)/1000000))ms to execute"
if [ "${LAUNCH_RA_FROM_STOCK_UI}" = "1" ] || [ "${RA_GAME}" = true ]; then
  if [ "${DISPLAY_RA_LOADING_SCREEN}" = "1" ]; then
    # Display Loading Screen
    if [ -f "${THEMES_PATH}/${SELECTED_THEME}/menu_files/ra_loading.png" ]; then
      "${PROJECT_ERIS_PATH}/bin/sdl_display" "${THEMES_PATH}/${SELECTED_THEME}/menu_files/ra_loading.png" &
      delayed_sdl_display_kill &
    elif [ -f "${THEMES_PATH}/stock/menu_files/ra_loading.png" ]; then
      "${PROJECT_ERIS_PATH}/bin/sdl_display" "${THEMES_PATH}/stock/menu_files/ra_loading.png" &
      delayed_sdl_display_kill &
    fi
  fi
  if [ "${RA_GAME}" = false ]; then
    echo "[PROJECT ERIS](INTERCEPT)(INFO) RetroArch is enabled as the emulator"
    # Swap stock multi disc game path to an .m3u for better disc swap support in RetroArch
    case "${INTERCEPT_GAME_ID}" in
      SCUS-94163|SLPM-86114|SLPS-01057|SLPS-01230|SLUS-00594)
        if [ "${INTERCEPT_GAME_EXT}" = "cue" ] && [ "${INTERCEPT_SAVE_STATE}" = false ] ; then
          echo "[PROJECT ERIS](INTERCEPT)(INFO) This is a stock multi disc game with no .m3u. An .m3u is needed for the best multi disc experience within RetroArch"
          if [ -f "${PROJECT_ERIS_PATH}/etc/project_eris/SUP/retroarch/title/${INTERCEPT_GAME_ID}.m3u" ]; then
            INTERCEPT_GAME_PATH="${PROJECT_ERIS_PATH}/etc/project_eris/SUP/retroarch/title/${INTERCEPT_GAME_ID}.m3u"
            INTERCEPT_GAME_EXT="m3u"
            echo "[PROJECT ERIS](INTERCEPT)(INFO) New Game full path: ${INTERCEPT_GAME_PATH}"
            echo "[PROJECT ERIS](INTERCEPT)(INFO) New Game extension: ${INTERCEPT_GAME_EXT}"
          else
            echo "[PROJECT ERIS](INTERCEPT)(ERROR) an .m3u does not exist at ${PROJECT_ERIS_PATH}/etc/project_eris/SUP/retroarch/title/${INTERCEPT_GAME_ID}.m3u"
          fi 
        fi
        ;;
    esac
  fi
  END=$(date +%s%N)
  echo "[PROJECT ERIS](INTERCEPT)(PROFILE) up to launching RetroArch took: $(((END-START)/1000000))ms to execute"
  echo -n 2 > "/data/power/disable"
  if [ ! -z "${RA_GAMEPATH}" ]; then
	echo "[PROJECT ERIS](INTERCEPT)(INFO) RA Create symbolic link: ${INTERCEPT_GAME_PATH} -> ${RA_GAMEPATH}"
	ln -sf "${RA_GAMEPATH}" "${INTERCEPT_GAME_PATH}"
  fi
  [ "${RA_GAME}" = false ] && link_ra_memory_cards
  launch_retroarch_from_StockUI "${RA_CORE}" "${RA_ARGS}"
  exit_checkSaveState
  if [ ! -z "${RA_GAMEPATH}" ]; then
	echo "[PROJECT ERIS](INTERCEPT)(INFO) remove RA symbolic link"
	rm -f "${INTERCEPT_GAME_PATH}"
  fi
  resume_ui_menu
  echo -n 1 > "/data/power/disable"
  exit 0
fi
echo "[PROJECT ERIS](INTERCEPT)(INFO) Launching ${INTERCEPT_PCSX_PATH} ${INTERCEPT_COMMAND} -cdfile ${INTERCEPT_GAME_PATH}"
END=$(date +%s%N)
echo "[PROJECT ERIS](INTERCEPT)(PROFILE) up to launching stock pcsx took: $(((END-START)/1000000))ms to execute"
LD_PRELOAD="${PROJECT_ERIS_PATH}/lib/sdl_remap_arm.so" "${INTERCEPT_PCSX_PATH}" ${INTERCEPT_COMMAND} -cdfile "${INTERCEPT_GAME_PATH}"
resume_ui_menu
# Exit returning the pcsx exit code
exit $?
